C51 COMPILER V9.56.0.0   24L01S                                                            04/08/2019 10:12:28 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE 24L01S
OBJECT MODULE PLACED IN .\Objects\24L01S.obj
COMPILER INVOKED BY: D:\keil5\C51\BIN\C51.EXE 24L01S.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\24L0
                    -1S.lst) OBJECT(.\Objects\24L01S.obj)

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include <intrins.h>
   3          #include "24L01S.h"
   4          #define uchar unsigned char
   5          #define uint  unsigned int
   6          
   7          //****************************************NRF24L01端口定义***************************************
   8          sbit    MISO    =P3^5;
   9          sbit    MOSI    =P3^6;
  10          sbit    SCK         =P3^4;
  11          sbit    CE          =P3^3;
  12          sbit    CSN             =P3^7;
  13          sbit    IRQ             =P3^2;
  14          
  15          
  16          //***********************************发送缓冲区*********************************************
  17          uchar TxBuf[32]=
  18          {
  19          0x01,0x02,0x03,0x4,0x05,0x06,0x07,0x08,
  20          0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,
  21          0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,
  22          0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x32,
  23          };       // 
  24          
  25          uint const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //本地地址
  26          uint const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //接收地址
  27          
  28          //*****************************************长延时*****************************************
  29          void Delay(unsigned int s)
  30          {
  31   1              unsigned int i;
  32   1              for(i=0; i<s; i++);
  33   1              for(i=0; i<s; i++);
  34   1      }
  35          //******************************************************************************************
  36          uint    bdata sta;   //状态标志
  37          sbit    RX_DR   =sta^6;
  38          sbit    TX_DS   =sta^5;
  39          sbit    MAX_RT  =sta^4;
  40          /******************************************************************************************
  41          /*延时函数
  42          /******************************************************************************************/
  43          void inerDelay_us(unsigned char n)
  44          {
  45   1              for(;n>0;n--)
  46   1                      _nop_();
  47   1      }
  48          
  49          /****************************************************************************************************
  50          /*函数：uint SPI_RW(uint dat)
  51          /*功能：NRF24L01的SPI写时序
  52          /****************************************************************************************************/
  53          uint SPI_RW(uint dat)
  54          {
C51 COMPILER V9.56.0.0   24L01S                                                            04/08/2019 10:12:28 PAGE 2   

  55   1              uint bit_ctr;
  56   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
  57   1              {
  58   2                      MOSI = (dat & 0x80);         // output 'uchar', MSB to MOSI
  59   2                      dat = (dat << 1);           // shift next bit into MSB..
  60   2                      SCK = 1;                      // Set SCK high..
  61   2                      dat |= MISO;                      // capture current MISO bit
  62   2                      SCK = 0;                          // ..then set SCK low again
  63   2              }
  64   1          return(dat);                          // return read uchar
  65   1      }
  66          /****************************************************************************************************
  67          /*函数：uchar SPI_Read(uchar reg)
  68          /*功能：NRF24L01的SPI时序
  69          /****************************************************************************************************/
  70          uchar SPI_Read(uchar reg)
  71          {
  72   1              uchar reg_val;
  73   1              
  74   1              CSN = 0;                // CSN low, initialize SPI communication...
  75   1              SPI_RW(reg);            // Select register to read from..
  76   1              reg_val = SPI_RW(0);    // ..then read registervalue
  77   1              CSN = 1;                // CSN high, terminate SPI communication
  78   1              
  79   1              return(reg_val);        // return register value
  80   1      }
  81          /****************************************************************************************************/
  82          /*功能：NRF24L01读写寄存器函数
  83          /****************************************************************************************************/
  84          uint SPI_RW_Reg(uchar reg, uchar value)
  85          {
  86   1              uint status;
  87   1              
  88   1              CSN = 0;                   // CSN low, init SPI transaction
  89   1              status = SPI_RW(reg);      // select register
  90   1              SPI_RW(value);             // ..and write value to it..
  91   1              CSN = 1;                   // CSN high again
  92   1              
  93   1              return(status);            // return nRF24L01 status uchar
  94   1      }
  95          /****************************************************************************************************/
  96          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
  97          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
  98          /****************************************************************************************************/
  99          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 100          {
 101   1              uint status,uchar_ctr;
 102   1              
 103   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 104   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 105   1              
 106   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 107   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 108   1              
 109   1              CSN = 1;                           
 110   1              
 111   1              return(status);                    // return nRF24L01 status uchar
 112   1      }
 113          /*********************************************************************************************************
 114          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 115          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 116          /*********************************************************************************************************
C51 COMPILER V9.56.0.0   24L01S                                                            04/08/2019 10:12:28 PAGE 3   

             -/
 117          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 118          {
 119   1              uint status,uchar_ctr;
 120   1              
 121   1              CSN = 0;            //SPI使能       
 122   1              status = SPI_RW(reg);   
 123   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 124   1                      SPI_RW(*pBuf++);
 125   1              CSN = 1;           //关闭SPI
 126   1              return(status);    // 
 127   1      }
 128          /****************************************************************************************************/
 129          /*函数：void SetRX_Mode(void)
 130          /*功能：数据接收配置 
 131          /****************************************************************************************************/
 132          void SetRX_Mode(void)
 133          {
 134   1              CE=0;
 135   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 136   1              CE = 1; 
 137   1              inerDelay_us(130);    //延时不能太短
 138   1      }
 139          /******************************************************************************************************/
 140          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 141          /*功能：数据读取后放如rx_buf接收缓冲区中
 142          /******************************************************************************************************/
 143          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 144          {
 145   1          unsigned char revale=0;
 146   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 147   1              if(RX_DR)                               // 判断是否接收到数据
 148   1              {
 149   2                  CE = 0;                     //SPI使能
 150   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 151   2                      revale =1;                      //读取数据完成标志
 152   2              }
 153   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 154   1              return revale;
 155   1      }
 156          /*********************************************************************************************************
             -**
 157          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 158          /*功能：发送 tx_buf中数据
 159          /*********************************************************************************************************
             -*/
 160          void nRF24L01_TxPacket(unsigned char * tx_buf)
 161          {
 162   1              CE=0;                   //StandBy I模式 
 163   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
*** WARNING C182 IN LINE 163 OF 24L01S.c: pointer to different objects
 164   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                      // 装载数据    
 165   1      //      SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 166   1              CE=1;            //置高CE，激发数据发送
 167   1              inerDelay_us(10);
 168   1      }
 169          
 170          //****************************************************************************************
 171          /*NRF24L01初始化
 172          //***************************************************************************************/
 173          void init_NRF24L01(void)
 174          {
C51 COMPILER V9.56.0.0   24L01S                                                            04/08/2019 10:12:28 PAGE 4   

 175   1          inerDelay_us(100);
 176   1              CE=0;    // chip enable
 177   1              CSN=1;   // Spi disable 
 178   1              SCK=0;   // Spi clock line init high
 179   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
*** WARNING C182 IN LINE 179 OF 24L01S.c: pointer to different objects
 180   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
*** WARNING C182 IN LINE 180 OF 24L01S.c: pointer to different objects
 181   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 182   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
 183   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 184   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 185   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB       
 186   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 187   1      
 188   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    432    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
